//-----------------------------------------------------------------------------
// HELPERS
// mixins, functions and other settings
//-----------------------------------------------------------------------------

$timing-defaults: 0.25s ease-out;

// http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

@mixin text-link {
  color: $c-blue;
  border-bottom: 1px solid transparent;
  transition: color $timing-defaults, border-color $timing-defaults;
  &:hover {
    color: mix($c-cyan, $c-blue);
    border-color: mix($c-cyan, $c-blue);
  }
}

@mixin icon-before($icon, $size:1rem) {
  position: relative;
  &:before {
    content: ' ';
    display: block;
    height: $size;
    width: $size;
    background-image: url(/assets/icons/#{$icon}.svg);
    background-size: $size $size;
  }
}

@mixin ul-icons() {
  margin: 0.5rem 0;
  padding: 0;

  li {
    display: block;
    margin: 0.5rem 0;
    &:last-child {
      margin-bottom: 0;
    }
  }
}

//-----------------------------------------------------------------------------
// icon-bullet
// replacing a bulleted list â€¢ with an svg icon
// requires: $icon
// params: $top, $left, $bottom , to offset if aligning
//  $align: top | center | bottom
//-----------------------------------------------------------------------------

@mixin icon-bullet($icon, $size:0.75rem, $left: 0, $top: null, $bottom: null, $align: center) {
  position: relative;
  padding-left: $size * 4/3 + $left;
  &:before {
    content: ' ';
    display: block;
    position: absolute;
    margin: auto; // top, bottom, height, auto = vertical align!
    left: 0 + $left;
    @if ($top) {
      top: $top;
    } @else {
      top: -$size/5;
    }
    @if ($align == 'top') {
      margin-top: 0;
    } @else if ($align == 'bottom') {
      @if ($bottom) {
        bottom: $bottom;
      } @else {
        bottom: 0;
      }
      margin-bottom: 0;
    } @else {
      @if ($bottom) {
        bottom: $bottom;
      } @else {
        bottom: 0;
      }
    }
    height: $size;
    width: $size;
    background-image: url(/assets/icons/#{$icon}.svg);
    background-size: $size $size;
  }

}

//certain icons used to represent recordtype should always be a mapped color.
@each $type, $c in $recordtypes {
  .icon-#{$type} {
    color: $c;
  }
}



@mixin small-caps {
  font-size: 75%;
  text-transform: uppercase;
}

@mixin control-base {
  border: 1px grey(20) solid;
  box-shadow: 0 1px 1px rgba(black, 0.1);
  border-radius: 2px;
  background: white;
}

// used in imgpanel controls currently
@mixin toolbar-button {
  float: right;
  display: block;
  color: white;
  border: 1px white solid;
  border-color: inherit;
  margin: rem-calc(-1 0 8 -1);
  padding: 1rem;
  @include breakpoint(small only) {
    padding: 0.66rem;
  }
  &:hover { background-color: black;}
}

// common properties across record-imgpanel components
@mixin imgpanel-h {
  $h: 36rem; // this might change after load?
  height: $h;
  transition: height $timing-defaults;
}

//-----------------------------------------------------------------------------
// svg-uri
// not packaging this cos its tiny,
// and i needed to make changes anyway to make compatible with IE:
// http://codepen.io/tigt/post/optimizing-svgs-in-data-uris
//-----------------------------------------------------------------------------

////
/// Helper function to easily use an SVG inline in CSS
/// without encoding it to base64, saving bytes.
/// It also helps with browser support.
////

/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
@function svg-uri($svg) {
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml,#{$encoded}");
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}
