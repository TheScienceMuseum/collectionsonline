//-----------------------------------------------------------------------------
// HELPERS
// mixins, functions and other settings
//-----------------------------------------------------------------------------

$transition-default: 0.2s ease-in-out;

/// Finds a value in a nested map.
/// @link https://css-tricks.com/snippets/sass/deep-getset-maps/ Deep Get/Set in Maps
///
/// @param {Map} $map - Map to pull a value from.
/// @param {String} $keys... - Keys to use when looking for a value.
/// @returns {Mixed} The value found in the map.
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

@mixin text-link($color: $c-blue, $hover: $c-teal) {
  color: $color;
  // border-bottom: 1px solid transparent;
  @include underline-zip;
  transition: color $transition-default, border-color $transition-default, background-size $transition-default;

  &:hover,
  &:active,
  &:focus,
  &:focus-visible {
    color: $hover;
  }
}

@mixin icon-before($icon, $size: 1rem) {
  position: relative;

  &:before {
    content: " ";
    display: block;
    height: $size;
    width: $size;
    background-image: url(/assets/icons/#{$icon}.svg);
    background-size: $size $size;
  }
}

@mixin ul-icons {
  margin: 0;
  padding: 0;

  li {
    display: block;
  }

  li + li {
    margin-top: 0.5em;
  }
}

@mixin flexcards-container {
  display: flex;
  flex-wrap: wrap;
  gap: $grid-gutter;

  &::before,
  &::after {
    // clear the row clearfix for Safari, if in flexmode
    flex-basis: 0;
    order: 1;
  }
}

@mixin flexcards-item {
  margin-bottom: 2rem;

  &,
  & > a {
    display: flex;
  }

  a {
    width: 100%;
  }
}

// wrap long text strings
@mixin hyphenate {
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-all;
  word-break: break-word;
  hyphens: auto;
}

//-----------------------------------------------------------------------------
// icon-bullet
// replacing a bulleted list â€¢ with an svg icon
// requires: $icon
// params: $top, $left, $bottom , to offset if aligning
//  $align: top | center | bottom
//-----------------------------------------------------------------------------

@mixin icon-bullet($icon,
  $size: 0.75em,
  $left: 0,
  $top: null) {
  position: relative;
  padding-left: $size * 1.33333 + $left;

  &:before {
    content: " ";
    display: block;
    position: absolute;
    margin: auto; // top, bottom, height, auto = vertical align!
    left: 0 + $left;

    @if ($top) {
      top: $top;
    }

    @else {
      top: -$size * 0.2;
    }

    height: $size;
    width: $size;
    background-image: url(/assets/icons/#{$icon}.svg);
    background-size: $size $size;
  }
}

//certain icons used to represent recordtype should always be a mapped color.
@each $type, $props in $recordtypes {
  .icon-#{$type} {
    color: map-get($props, bg);
  }
}

@mixin small-caps {
  font-size: 75%;
  text-transform: uppercase;
  font-weight: 500;
  letter-spacing: 0.015em;
}

@mixin control-base {
  border: 1px black solid;
  background: white;
  color: black;
}

@mixin control-hover {
  background-color: grey(10);
}

// used in imgpanel controls currently
@mixin toolbar-button {
  float: right;
  // display: flex;
  // justify-content: center;
  // align-items: center;
  cursor: pointer;
  color: white;
  border: 1px white solid;
  border-color: inherit;
  margin: rem(-1 0 8 -1);
  height: 3rem;
  min-width: 3rem;

  @include media("<=small") {
    height: 2.5rem;
    min-width: 2.5rem;
  }

  &:hover {
    background-color: black;
  }
}

// common properties across record-imgpanel components
@mixin imgpanel-h {
  $h: 36rem; // this might change after load?
  height: $h;
  transition: height $transition-default;

  @include media("<=small") {
    height: 25rem;
  }

  //  = 12px
}

// generic styling of html children
@mixin textstyles {
  & > * + * {
    margin-top: 1rem !important;
  }

  h1:not([class]) {
    font-size: 3rem;
    line-height: 1;
    margin: 0;
  }

  h3:not([class]) {
    font-size: 1.75rem;
    margin: 0;
  }

  p,
  li {
    line-height: 1.5;
  }

  a {
    color: var(--smg-link-color, #{$c-blue});
    text-decoration: underline;
  }

  :last-child {
    margin-bottom: 0;
  }

  :first-child {
    margin-top: 0;
  }
}

/**
Fix aspect ratio at 4:3,
Stop white bg images from blending into bg
*/
@mixin card-image {
  position: relative;
  overflow: hidden;
  width: 100%;
  height: 0;
  padding-top: 75%;
  margin: 0;
  background-color: grey(80);

  img {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }


  &:has(img):after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border: 1px rgba(black, 0.1) solid;
    mix-blend-mode: darken;
    pointer-events: none;
  }

  figcaption {
    overflow: hidden;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: 0;
    padding: 0.125em;
    color: rgba(white, 0.25);
    font-size: clamp-between(1.5rem, 2rem);
    line-height: 1;
    letter-spacing: rem(-1);

    .icon {
      color: inherit;
      vertical-align: bottom;
    }
  }

  svg.collage {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
  }
}
