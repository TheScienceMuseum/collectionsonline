// Photoshop blend modes from https://github.com/heygrady/scss-blend-modes
// this is useful reference too: http://jackiebalzer.com/color

//-----------------------------------------------------------------------------
// Normal
//-----------------------------------------------------------------------------

@function blend-normal($foreground, $background) {
  $opacity: opacity($foreground);
  $background-opacity: opacity($background);

  // calculate opacity
  $bm-red: red($foreground) * $opacity + red($background) * $background-opacity *
    (1 - $opacity);
  $bm-green: green($foreground) * $opacity + green($background) *
    $background-opacity * (1 - $opacity);
  $bm-blue: blue($foreground) * $opacity + blue($background) *
    $background-opacity * (1 - $opacity);
  @return rgb($bm-red, $bm-green, $bm-blue);
}

//--------------------------------
// Multiply
//--------------------------------
@function blend-multiply($foreground, $background) {
  $bm-red: red($background) * red($foreground) / 255;
  $bm-green: green($background) * green($foreground) / 255;
  $bm-blue: blue($background) * blue($foreground) / 255;

  @return blend-normal(
    rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)),
    $background
  );
}

// main brand colours
$c-red: #e60060;
$c-orange: #ec6408;
$c-yellow: #ffee00;
$c-green: #95c11f;
$c-teal: #4bbecf;
$c-blue: #004899;
$c-purple: #af1280;

$c-lightgrey: #dadada;
$c-turquoise: #40e0d0;
$c-dark-green: #317873;

//colors mapped to recordtypes for quick changes, and for for loops
$recordtypes: (
  objects: (
    bg: $c-teal,
    grad: $c-teal $c-green $c-blue
  ),
  people: (
    bg: $c-orange,
    grad: $c-yellow $c-orange $c-red
  ),
  all: (
    bg: $c-green,
    grad: $c-yellow $c-green $c-teal
  ),
  documents: (
    bg: $c-purple,
    grad: $c-red $c-purple $c-blue
  ),
  archive: (
    bg: $c-purple,
    grad: $c-red $c-purple $c-blue
  ),
  archivedoc: (
    bg: $c-purple,
    grad: $c-red $c-purple $c-blue
  ),
  collection: (
    bg: $c-blue,
    grad: $c-teal $c-blue $c-purple
  )
);

/// Returns a grey color from 0-white to 100-black
/// @example grey(20) = #ccc
/// @param {Number} $tint - number between 0-100
@function grey($tint) {
  @return rgb(255 - $tint * 2.55, 255 - $tint * 2.55, 255 - $tint * 2.55);
}

/// lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}

@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

/// create a Background gradient from the SMG palette
/// @param {List} $stops - List of colors
@mixin sm-gradient($stops) {
  @each $stop in $stops {
    @if type-of($stop) != color {
      @warn '`#{$stop}` is not a color. I wish it was.';
    }
  }

  @if length($stops) == 1 {
    background-color: $stops;
  }
  @if length($stops) == 2 {
    background-image: linear-gradient(
      135deg,
      nth($stops, 1) 0%,
      nth($stops, 2) 100%
    );
  }
  @if length($stops) > 2 {
    background-image: radial-gradient(
        ellipse at bottom left,
        nth($stops, 1),
        rgba(nth($stops, 1), 0) 50%
      ),
      linear-gradient(to right, nth($stops, 2) 0%, nth($stops, 3) 100%);
  }
}

/// Animates background gradients
/// @access public
/// @param {String} $duration - time + s
/// @param {Number} $layers - if multiple properties, number of
/// @return {String}

@mixin sm-gradient-animated($duration: 5s, $layers: 1) {
  $name: sm-grad-fade-#{$duration}-#{$layers}; // if these variables change, we'd need to ouput a different name at root.
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: ease-in-out;
  animation-direction: alternate;
  animation-iteration-count: infinite;

  @at-root {
    @keyframes #{$name} {
      0% {
        background-size: repeat(100% 100%, $layers);
      }
      100% {
        background-size: repeat(200% 200%, $layers);
      }
    }
  }
}

/// repeats a value. For properties that take comma-separated lists
/// @access public
/// @param {String} $value - initial value to repeat
/// @param {Number} $repetitions - number of repetitions
/// @return {String}

@function repeat($value, $repetitions) {
  $values: ();
  @for $i from 1 through $repetitions {
    $next_value: $value;
    $values: append($values, $next_value, comma);
  }
  @return $values;
}
